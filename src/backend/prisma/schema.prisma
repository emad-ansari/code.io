// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id           String @id @default(cuid())
  username     String
  email        String
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  problem      Problem[]
  problemStatus  ProblemStatus[]
  submissions  Submission[] @relation("SubmissionToUser")
  role         String @default("user")
}

// Problem model
model Problem {
  id           String @id @default(cuid())
  title        String @unique
  description  String
  difficulty   String @default("Easy")
  problemNo    Int @unique
  isReviewed   Boolean @default(false)  // remove it
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    String
  user         User @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  defualtCode  DefaultCode[]
  problemStatus ProblemStatus[]
  testcases    TestCase[]
}

model DefaultCode {
  id          String @id @default(cuid())
  code        String
  problemId   String
  languageId  Int
  problem     Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProblemStatus {
  id          String @id @default(cuid())
  status      String @default("Todo")
  userId      String
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId   String
  problem     Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  @@unique([problemId, userId])
}

model TestCase {
  id          String @id @default(cuid())
  title       String?  // remove this don't need any more
  problemId   String
  isReviewed   Boolean @default(false)  // remove it 
  problem     Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
  inputs      TestCaseInput[]
  output      TestCaseOutput?  // [Todo] - need to look on this relation to make one-to-one not one-to-many
}

// Model for Test case Input 
model TestCaseInput {
  id          String @id @default(cuid()) 
  name        String
  type        String
  value       String
  testcaseId  String
  testcase   TestCase @relation(fields: [testcaseId], references: [id], onDelete: Cascade)
}

// model for Test case Output
model TestCaseOutput {
  id        String @id @default(cuid())
  type      String
  value     String
  testcaseId  String @unique
  testcase   TestCase @relation(fields: [testcaseId], references: [id], onDelete: Cascade)
}

model Submission {
  id            String   @id @default(uuid())
  code          String
  time          String
  memory        String
  status        String
  userId        String
  problemId     String
  languageId    Int
  user           User @relation("SubmissionToUser", fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}