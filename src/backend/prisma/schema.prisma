// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id             String          @id @default(cuid())
  username       String
  email          String
  password       String
  role           UserRole        @default(USER)
  streak         Streak?        // 1:1 relationship
  activityLogs   ActivityLog[]  // Daily activity tracking
  progress       Progress?
  solvedProblems ProblemSolved[]
  submissions    Submission[]    @relation("SubmissionToUser") // Track of user's submissions
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Streak {
  id          String   @id @default(cuid())
  current     Int      @default(0)   // Active streak count
  longest     Int      @default(0)   // All-time highest streak
  lastUpdated DateTime @default(now()) // Last activity date
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
}

model ActivityLog {
  id     String   @id @default(cuid())
  date   DateTime @default(now())  // Date-only (no timezone)
  user   User     @relation(fields: [userId], references: [id])
  userId String
  
  @@unique([userId, date])
}

// Category model
model ProblemCategory {
  id               String             @id @default(cuid())
  name             String             @unique
  title            String
  imgUrl           String
  tags             String[]
  problems         Problem[]
  solvedProblems   ProblemSolved[]
  CategoryProgress CategoryProgress[]
}

// Problem model
model Problem {
  id             String          @id @default(cuid())
  problemNo      Int             @unique @default(autoincrement())
  title          String          @unique
  description    String
  difficulty     Difficulty
  likes          Int @default(0)
  dislikes       Int @default(0)
  submissions    Int @default(0)
  tags           String[]
  testcases      Testcase[]
  templates      TemplateCode[]
  solvedProblems ProblemSolved[] // problems solved by users
  categoryId     String
  category       ProblemCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdBy      String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  @@index([categoryId])
  @@index([difficulty])
}

model TemplateCode {
  id            String  @id @default(cuid())
  language      String  @unique
  full_template String
  boiler_code   String
  problemId     String
  problem       Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Testcase {
  id               String  @id @default(cuid())
  input            String
  expected_output  String
  isSample         Boolean
  problemId        String
  problem          Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)
}

model Progress {
  id               String             @id @default(cuid())
  easySolved       Int                @default(0)
  mediumSolved     Int                @default(0)
  hardSolved       Int                @default(0)
  totalSolved      Int                @default(0)
  categoryProgress CategoryProgress[]
  userId           String             @unique
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

// Simplified - now only tracks total solved per category
model CategoryProgress {
  id          String          @id @default(cuid())
  progress    Progress        @relation(fields: [progressId], references: [id], onDelete: Cascade)
  progressId  String
  category    ProblemCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  totalSolved Int             @default(0)

  @@unique([progressId, categoryId])
}

model ProblemSolved {
  id         String          @id @default(cuid())
  status     SolvedStatus    @default(TODO)
  userId     String
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  problemId  String
  problem    Problem         @relation(fields: [problemId], references: [id], onDelete: Cascade)
  categoryId String          
  category   ProblemCategory @relation(fields: [categoryId], references: [id])
  solvedAt   DateTime        @default(now())

  @@unique([problemId, userId])
}

model Submission {
  id         String           @id @default(uuid())
  code       String
  time       String
  memory     String
  status     SubmissionStatus
  userId     String
  problemId  String
  languageId Int
  user       User             @relation("SubmissionToUser", fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum UserRole {
  USER
  ADMIN
}

enum SolvedStatus { 
  TODO
  ATTEMPTED
  SOLVED
}
enum SubmissionStatus {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILATION_ERROR
}
